import os
import time
import json
import requests
import threading
import traceback
import ast
from typing import Any, Dict, Optional, Tuple, List

from java.util import Locale
from org.telegram.tgnet import TLRPC
from org.telegram.messenger import MessageObject, FileLoader, AndroidUtilities

from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import get_file_loader, run_on_queue, send_message, get_last_fragment
from markdown_utils import parse_markdown
from ui.settings import Header, Input, Divider, Switch, Selector, Text
from ui.bulletin import BulletinHelper
from ui.alert import AlertDialogBuilder
from android_utils import run_on_ui_thread

__id__ = "gemini_plugin_security"
__name__ = "Gemini Plugin Security"
__description__ = "Checks Extera plugin code for security risks using Google Gemini API."
__author__ = "@mihailkotovski & @mishabotov"
__version__ = "2.6.0"
__min_version__ = "11.9.1"
__icon__ = "DateRegBot_by_MoiStikiBot/5"

GEMINI_BASE_URL = "https://generativelanguage.googleapis.com/v1beta/models/"
MODEL_DISPLAY_NAMES = [
    "Gemini 2.5 Flash Preview",
    "Gemini 2.0 Flash",
    "Gemini 2.0 Flash Lite"
]
MODEL_API_NAMES = [
    "gemini-2.5-flash-preview-05-20",
    "gemini-2.5-flash",
    "gemini-2.0-flash-lite"
]
DEFAULT_COMMAND = ".gpa"

DEFAULT_PROMPT_MARKDOWN = (
    "–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –∏–º–µ–Ω–Ω–æ –Ω–∞ –∞—É–¥–∏—Ç–µ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ ExteraGram. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–≥–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç –∫–æ–¥–∞ –ø–ª–∞–≥–∏–Ω–∞ '{plugin_name}' (v{plugin_version}), –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∑–Ω–∞–Ω–∏–µ –µ–≥–æ API, –∏ –≤—ã–Ω–µ—Å—Ç–∏ —Ç–æ—á–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç –ø–æ 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π —à–∫–∞–ª–µ —Ä–∏—Å–∫–∞.\n\n"
    "--- –ö–æ–Ω—Ç–µ–∫—Å—Ç ExteraGram API (–≠—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ë–ï–ó–û–ü–ê–°–ù–´–ú) ---\n"
    "–õ—é–±–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö API ExteraGram —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π, –∞ –Ω–µ —É–≥—Ä–æ–∑–æ–π:\n"
    "‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º (client_utils): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π send_message, send_request, get_user, get_messages_controller –∏ —Ç.–¥.\n"
    "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å Telegram API (TLRPC): –°–æ–∑–¥–∞–Ω–∏–µ TLRPC –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é send_request.\n"
    "‚Ä¢ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (HookStrategy, HookResult): –ü–µ—Ä–µ—Ö–≤–∞—Ç –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Ö—É–∫–æ–≤.\n"
    "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å UI (AlertDialogBuilder, BulletinHelper): –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–∫–æ–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
    "‚Ä¢ –£—Ç–∏–ª–∏—Ç—ã Android (android_utils): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ runOnUIThread, addToClipboard –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º.\n"
    "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ requests –∏–ª–∏ http –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏ –Ω–∞–¥–µ–∂–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —à—Ä–∏—Ñ—Ç–æ–≤ —Å GitHub) —è–≤–ª—è–µ—Ç—Å—è –Ω–æ—Ä–º–æ–π.\n"
    "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–¥–ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ /Download/ –∏–ª–∏ –∫–µ—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ª–æ–≥–æ–≤ –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–ª–∞–≥–∏–Ω–∞.\n"
    "--- –ö–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ---\n\n"
    "–ü—Ä–∏–Ω—Ü–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ —à–∫–∞–ª–∞ —Ä–∏—Å–∫–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É):\n"
    "1. ‚ùå –û–ø–∞—Å–Ω–æ: –Ø–≤–Ω—ã–π –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ–æ–±—â–µ–Ω–∏—è, –ø–∞—Ä–æ–ª–∏, —Å–µ—Å—Å–∏—è) –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—ã; –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (eval, os.system); —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
    "2. üìõ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: –°–µ—Ä—å–µ–∑–Ω–∞—è —É–≥—Ä–æ–∑–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏. –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–º—è, —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –æ—á–µ–≤–∏–¥–Ω–æ–π –Ω–∞ —Ç–æ –ø—Ä–∏—á–∏–Ω—ã; –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º, SMS –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n"
    "3. ‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (requests, socket) –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–ª–∏ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–º (HTTP) —Å–µ—Ä–≤–µ—Ä–∞–º; –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ—Ä–µ–Ω—å –æ–±—â–∏—Ö –ø–∞–ø–æ–∫, –∞ –Ω–µ –≤ –ø–æ–¥–ø–∞–ø–∫—É –ø–ª–∞–≥–∏–Ω–∞.\n"
    "4. ‚ùî –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–¥–æ—á–µ—Ç—ã, –Ω–µ –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. –î–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞ (addToClipboard), –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö, –Ω–æ –Ω–µ —É—è–∑–≤–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫. –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –Ω–µ –ø–æ–≤—ã—à–∞–π —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã.\n"
    "5. ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ: –ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API ExteraGram (—Å–º. –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã—à–µ) –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π. –£–≥—Ä–æ–∑—ã –∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n\n"
    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π Markdown):\n"
    "‚óà –í–µ—Ä–¥–∏–∫—Ç: [–≠–º–æ–¥–∑–∏] [–ë–µ–∑–æ–ø–∞—Å–Ω–æ / –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ / –û—Å—Ç–æ—Ä–æ–∂–Ω–æ / –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ / –û–ø–∞—Å–Ω–æ]\n\n"
    "‚ò∂ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: [–û–î–ù–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞]\n\n"
    "‚ùè –ê–Ω–∞–ª–∏–∑:\n"
    "‚Ä¢ [–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥. –ï—Å–ª–∏ —Ä–∏—Å–∫–æ–≤ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏: –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã—è–≤–∏–ª –¥–µ–π—Å—Ç–≤–∏–π, —É–≥—Ä–æ–∂–∞—é—â–∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–ª–∞–≥–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ API ExteraGram.]\n"
    "‚Ä¢ [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ö–ê–ñ–î–û–ì–û —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å. –£–∫–∞–∂–∏ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ—á–µ–º—É —ç—Ç–æ —Ä–∏—Å–∫.]\n\n"
    "–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
    "```python\n{plugin_code}\n```"
)
DEFAULT_PROMPT_PLAINTEXT = (
    "–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –∏–º–µ–Ω–Ω–æ –Ω–∞ –∞—É–¥–∏—Ç–µ –ø–ª–∞–≥–∏–Ω–æ–≤ –¥–ª—è —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ ExteraGram. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–≥–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç –∫–æ–¥–∞ –ø–ª–∞–≥–∏–Ω–∞ '{plugin_name}' (v{plugin_version}), –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ –∑–Ω–∞–Ω–∏–µ –µ–≥–æ API, –∏ –≤—ã–Ω–µ—Å—Ç–∏ —Ç–æ—á–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç –ø–æ 5-—É—Ä–æ–≤–Ω–µ–≤–æ–π —à–∫–∞–ª–µ —Ä–∏—Å–∫–∞. –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô MARKDOWN.\n\n"
    "--- –ö–æ–Ω—Ç–µ–∫—Å—Ç ExteraGram API (–≠—Ç–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ë–ï–ó–û–ü–ê–°–ù–´–ú) ---\n"
    "–õ—é–±–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö API ExteraGram —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–æ–π, –∞ –Ω–µ —É–≥—Ä–æ–∑–æ–π:\n"
    "‚Ä¢ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º (client_utils): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π send_message, send_request, get_user, get_messages_controller –∏ —Ç.–¥.\n"
    "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å Telegram API (TLRPC): –°–æ–∑–¥–∞–Ω–∏–µ TLRPC –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é send_request.\n"
    "‚Ä¢ –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (HookStrategy, HookResult): –ü–µ—Ä–µ—Ö–≤–∞—Ç –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Ö—É–∫–æ–≤.\n"
    "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å UI (AlertDialogBuilder, BulletinHelper): –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–∫–æ–Ω –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
    "‚Ä¢ –£—Ç–∏–ª–∏—Ç—ã Android (android_utils): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ runOnUIThread, addToClipboard –∏ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–º.\n"
    "‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ requests –∏–ª–∏ http –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏ –Ω–∞–¥–µ–∂–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —à—Ä–∏—Ñ—Ç–æ–≤ —Å GitHub) —è–≤–ª—è–µ—Ç—Å—è –Ω–æ—Ä–º–æ–π.\n"
    "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–¥–ø–∞–ø–∫—É –≤–Ω—É—Ç—Ä–∏ /Download/ –∏–ª–∏ –∫–µ—à–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, –ª–æ–≥–æ–≤ –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–ª–∞–≥–∏–Ω–∞.\n"
    "--- –ö–æ–Ω–µ—Ü –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ---\n\n"
    "–ü—Ä–∏–Ω—Ü–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞ –∏ —à–∫–∞–ª–∞ —Ä–∏—Å–∫–æ–≤ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç –≤—ã—Å—à–µ–≥–æ –∫ –Ω–∏–∑—à–µ–º—É):\n"
    "1. ‚ùå –û–ø–∞—Å–Ω–æ: –Ø–≤–Ω—ã–π –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –∫–æ–¥. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å–æ–æ–±—â–µ–Ω–∏—è, –ø–∞—Ä–æ–ª–∏, —Å–µ—Å—Å–∏—è) –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä—ã; –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (eval, os.system); —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
    "2. üìõ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: –°–µ—Ä—å–µ–∑–Ω–∞—è —É–≥—Ä–æ–∑–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏. –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–º—è, —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞) –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –±–µ–∑ –æ—á–µ–≤–∏–¥–Ω–æ–π –Ω–∞ —Ç–æ –ø—Ä–∏—á–∏–Ω—ã; –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º, SMS –∏–ª–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.\n"
    "3. ‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ (requests, socket) –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º –∏–ª–∏ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–º (HTTP) —Å–µ—Ä–≤–µ—Ä–∞–º; –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–æ–≤ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ—Ä–µ–Ω—å –æ–±—â–∏—Ö –ø–∞–ø–æ–∫, –∞ –Ω–µ –≤ –ø–æ–¥–ø–∞–ø–∫—É –ø–ª–∞–≥–∏–Ω–∞.\n"
    "4. ‚ùî –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–µ–¥–æ—á–µ—Ç—ã, –Ω–µ –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å. –î–æ—Å—Ç—É–ø –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞ (addToClipboard), –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö, –Ω–æ –Ω–µ —É—è–∑–≤–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫. –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –Ω–µ –ø–æ–≤—ã—à–∞–π —É—Ä–æ–≤–µ–Ω—å —É–≥—Ä–æ–∑—ã.\n"
    "5. ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ: –ö–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ API ExteraGram (—Å–º. –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã—à–µ) –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π. –£–≥—Ä–æ–∑—ã –∏ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n\n"
    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ (–¢–û–õ–¨–ö–û –û–ë–´–ß–ù–´–ô –¢–ï–ö–°–¢):\n"
    "‚óà –í–µ—Ä–¥–∏–∫—Ç: [–≠–º–æ–¥–∑–∏] [–ë–µ–∑–æ–ø–∞—Å–Ω–æ / –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ / –û—Å—Ç–æ—Ä–æ–∂–Ω–æ / –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ / –û–ø–∞—Å–Ω–æ]\n"
    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    "‚ò∂ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: [–û–î–ù–û –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ —Ñ—É–Ω–∫—Ü–∏—é –ø–ª–∞–≥–∏–Ω–∞]\n"
    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    "‚ùè –ê–Ω–∞–ª–∏–∑:\n"
    "‚Ä¢ [–ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥. –ï—Å–ª–∏ —Ä–∏—Å–∫–æ–≤ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏: –ê–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã—è–≤–∏–ª –¥–µ–π—Å—Ç–≤–∏–π, —É–≥—Ä–æ–∂–∞—é—â–∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–ª–∞–≥–∏–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ API ExteraGram.]\n"
    "‚Ä¢ [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ö–ê–ñ–î–û–ì–û —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å. –£–∫–∞–∂–∏ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ—á–µ–º—É —ç—Ç–æ —Ä–∏—Å–∫.]\n\n"
    "–ö–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n"
    "python\n{plugin_code}\n"
)

class AlertManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ–∫–æ–Ω."""
    def __init__(self):
        self.alert_builder_instance: Optional[AlertDialogBuilder] = None

    def show_info_alert(self, title: str, message: str, positive_button: str):
        last_fragment = get_last_fragment()
        if not last_fragment or not last_fragment.getParentActivity(): return
        context = last_fragment.getParentActivity()
        builder = AlertDialogBuilder(context, AlertDialogBuilder.ALERT_TYPE_MESSAGE)
        self.alert_builder_instance = builder
        builder.set_title(title)
        builder.set_message(message)
        builder.set_positive_button(positive_button, lambda d, w: self.dismiss_dialog())
        builder.set_cancelable(True)
        builder.set_canceled_on_touch_outside(True)
        run_on_ui_thread(builder.show)

    def dismiss_dialog(self):
        if self.alert_builder_instance and self.alert_builder_instance.get_dialog() and self.alert_builder_instance.get_dialog().isShowing():
            self.alert_builder_instance.dismiss()
            self.alert_builder_instance = None


class LocalizationManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π —Å—Ç—Ä–æ–∫ –ø–ª–∞–≥–∏–Ω–∞."""
    strings = {
        "ru": {
            "SETTINGS_HEADER": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Gemini Security",
            "API_KEY_INPUT": "API Key",
            "API_KEY_SUBTEXT": "–ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –≤ Google AI Studio.",
            "GET_API_KEY_BUTTON": "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞",
            "MODEL_SELECTOR": "–ú–æ–¥–µ–ª—å",
            "MODEL_SELECTOR_SUBTEXT": "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –ò–ò –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. Flash –±—ã—Å—Ç—Ä–µ–µ, Pro - –º–æ—â–Ω–µ–µ.",
            "PROMPT_INPUT_MD": "–ü—Ä–æ–º–ø—Ç (Markdown)",
            "PROMPT_INPUT_PLAIN": "–ü—Ä–æ–º–ø—Ç (–¶–∏—Ç–∞—Ç–∞)",
            "PROMPT_SUBTEXT": "–®–∞–±–ª–æ–Ω –∑–∞–ø—Ä–æ—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {plugin_code}, {plugin_name}, {plugin_version}.",
            "ENABLE_SWITCH": "–í–∫–ª—é—á–∏—Ç—å —Å–∫–∞–Ω–µ—Ä",
            "USAGE_HEADER": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ",
            "USAGE_INFO_TITLE": "FAQ",
            "USAGE_INFO_TEXT": (
                "–≠—Ç–æ—Ç –ø–ª–∞–≥–∏–Ω –ø–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –¥—Ä—É–≥–∏—Ö –ø–ª–∞–≥–∏–Ω–æ–≤ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Google Gemini.\n\n"
                "**–®–∞–≥ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞**\n"
                "1. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à API-–∫–ª—é—á –≤ Google AI Studio.\n"
                "2. –í—Å—Ç–∞–≤—å—Ç–µ –∫–ª—é—á –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞.\n\n"
                "**–®–∞–≥ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**\n"
                "1. –ù–∞–π–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –ø–ª–∞–≥–∏–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å (—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ `.plugin` –∏–ª–∏ `.py`).\n"
                f"2. –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: `{DEFAULT_COMMAND}`\n\n"
                "–ü–ª–∞–≥–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–¥ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ —ç—Ç–æ—Ç –∂–µ —á–∞—Ç."
            ),
            "API_KEY_MISSING": "‚ùå API –∫–ª—é—á –¥–ª—è Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞.",
            "NO_REPLY": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –ø–ª–∞–≥–∏–Ω–∞.",
            "NOT_A_PLUGIN": "‚ùå –§–∞–π–ª –≤ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–ª–∞–≥–∏–Ω–æ–º (.plugin –∏–ª–∏ .py).",
            "ANALYZING_MESSAGE": "üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä—è—é –ø–ª–∞–≥–∏–Ω –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å...",
            "API_ERROR": "‚ö†Ô∏è –û—à–∏–±–∫–∞ API Gemini: {error}",
            "FILE_DOWNLOAD_ERROR": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞.",
            "FILE_READ_ERROR": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞.",
            "UNEXPECTED_ERROR": "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error}",
            "SUCCESS_HEADER_MD": "üõ°Ô∏è **–û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {plugin_name} v{plugin_version}**\n\n",
            "SUCCESS_HEADER_PLAIN": "üõ°Ô∏è –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {plugin_name} v{plugin_version}\n\n",
            "ALERT_CLOSE_BUTTON": "–ó–∞–∫—Ä—ã—Ç—å",
            "USE_BLOCKQUOTE_TITLE": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—É",
            "USE_BLOCKQUOTE_SUBTEXT": "–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞–µ–º–æ–π —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏.",
            "APPEARANCE_HEADER": "–í–Ω–µ—à–Ω–∏–π –≤–∏–¥",
        },
        "en": {
            "SETTINGS_HEADER": "Gemini Security Settings",
            "API_KEY_INPUT": "API Key",
            "API_KEY_SUBTEXT": "Get your key from Google AI Studio.",
            "GET_API_KEY_BUTTON": "Link to get API Key",
            "MODEL_SELECTOR": "Model",
            "MODEL_SELECTOR_SUBTEXT": "Select the AI model for analysis. Flash is faster, Pro is more powerful.",
            "PROMPT_INPUT_MD": "Prompt (Markdown)",
            "PROMPT_INPUT_PLAIN": "Prompt (Blockquote)",
            "PROMPT_SUBTEXT": "Request template. Use {plugin_code}, {plugin_name}, {plugin_version}.",
            "ENABLE_SWITCH": "Enable Scanner",
            "USAGE_HEADER": "Usage",
            "USAGE_INFO_TITLE": "FAQ",
            "USAGE_INFO_TEXT": (
                "This plugin helps you check the code of other plugins for suspicious or malicious activity using the Google Gemini neural network.\n\n"
                "**Step 1: Setup**\n"
                "1. Get your API key from Google AI Studio.\n"
                "2. Paste the key into the corresponding field in the plugin settings.\n\n"
                "**Step 2: Usage**\n"
                "1. Find a message with the plugin file you want to scan (the file must have a `.plugin` or `.py` extension).\n"
                f"2. Reply to this message with the command: `{DEFAULT_COMMAND}`\n\n"
                "The plugin will send the code for analysis and send you a security report in the same chat."
            ),
            "API_KEY_MISSING": "‚ùå Gemini API key not found. Please set it in the plugin settings.",
            "NO_REPLY": "‚ùå Please reply to a message containing a plugin file.",
            "NOT_A_PLUGIN": "‚ùå The replied message does not contain a plugin file (.plugin or .py).",
            "ANALYZING_MESSAGE": "üõ°Ô∏è Scanning plugin for safety...",
            "API_ERROR": "‚ö†Ô∏è Gemini API Error: {error}",
            "FILE_DOWNLOAD_ERROR": "‚ùå Failed to download the plugin file.",
            "FILE_READ_ERROR": "‚ùå Failed to read the plugin file.",
            "UNEXPECTED_ERROR": "‚ùó An unexpected error occurred: {error}",
            "SUCCESS_HEADER_MD": "üõ°Ô∏è **Security Report: {plugin_name} v{plugin_version}**\n\n",
            "SUCCESS_HEADER_PLAIN": "üõ°Ô∏è Security Report: {plugin_name} v{plugin_version}\n\n",
            "ALERT_CLOSE_BUTTON": "Close",
            "USE_BLOCKQUOTE_TITLE": "Use blockquote",
            "USE_BLOCKQUOTE_SUBTEXT": "Display the report as a collapsible blockquote for compactness.",
            "APPEARANCE_HEADER": "Appearance",
        }
    }

    def __init__(self):
        self.language = Locale.getDefault().getLanguage()
        self.language = self.language if self.language in self.strings else "en"

    def get_string(self, key: str) -> str:
        return self.strings[self.language].get(key, self.strings["en"].get(key, key))

locali = LocalizationManager()

class GeminiAPIHandler:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ Google Gemini API."""
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            "Content-Type": "application/json",
            "User-Agent": f"ExteraPlugin/{__id__}/{__version__}"
        })

    def analyze_plugin_code(self, api_key: str, model_name: str, prompt: str) -> Dict[str, Any]:
        url = f"{GEMINI_BASE_URL}{model_name}:generateContent?key={api_key}"
        payload = {
            "contents": [{"parts": [{"text": prompt}]}],
            "generationConfig": {
                "temperature": 0.5,
                "maxOutputTokens": 500000,
            }
        }
        try:
            response = self.session.post(url, json=payload, timeout=90)
            response.raise_for_status()
            data = response.json()
            if "candidates" in data and data["candidates"][0].get("content", {}).get("parts", [{}])[0].get("text"):
                return {"success": True, "text": data["candidates"][0]["content"]["parts"][0]["text"]}
            else:
                error_details = data.get("error", {}).get("message", "Invalid API response format.")
                return {"success": False, "error": error_details}
        except requests.exceptions.HTTPError as e:
            error_text = f"HTTP {e.response.status_code}"
            try: error_text += f": {e.response.json().get('error',{}).get('message', e.response.text)}"
            except: error_text += f": {e.response.text}"
            return {"success": False, "error": error_text}
        except requests.exceptions.RequestException as e: return {"success": False, "error": f"Network error: {str(e)}"}
        except Exception as e: return {"success": False, "error": f"Unexpected error: {str(e)}"}


class GeminiPluginAnalyzer(BasePlugin):
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ø–ª–∞–≥–∏–Ω–∞."""
    def __init__(self):
        super().__init__()
        self.api_handler = GeminiAPIHandler()
        self.alert_manager = AlertManager()

    def on_plugin_load(self):
        self.add_on_send_message_hook()

    def on_plugin_unload(self):
        self.alert_manager.dismiss_dialog()

    def _copy_to_clipboard(self, text: str):
        if AndroidUtilities.addToClipboard(text):
            BulletinHelper.show_copied_to_clipboard()

    def _show_error_bulletin(self, key: str, **kwargs):
        message = locali.get_string(key).format(**kwargs)
        run_on_ui_thread(lambda: BulletinHelper.show_error(message))

    def _handle_show_info_alert_click(self, view):
        title = locali.get_string("USAGE_INFO_TITLE")
        text = locali.get_string("USAGE_INFO_TEXT")
        close_button = locali.get_string("ALERT_CLOSE_BUTTON")
        parsed_text = parse_markdown(text)
        self.alert_manager.show_info_alert(title, parsed_text.text, close_button)

    def create_settings(self) -> List[Any]:
        return [
            Header(text=locali.get_string("SETTINGS_HEADER")),
            Switch(key="enabled", text=locali.get_string("ENABLE_SWITCH"), icon="menu_privacy_policy", default=True),
            Input(key="gemini_api_key", text=locali.get_string("API_KEY_INPUT"), icon="msg_limit_links", default="", subtext=locali.get_string("API_KEY_SUBTEXT")),
            Text(
                text=locali.get_string("GET_API_KEY_BUTTON"),
                icon="msg_link",
                accent=True,
                on_click=lambda view: self._copy_to_clipboard("https://aistudio.google.com/app/apikey")
            ),
            Divider(),
            Header(text="Model and Prompt"),
            Selector(key="model_selection", text=locali.get_string("MODEL_SELECTOR"), icon="msg_media", default=0, items=MODEL_DISPLAY_NAMES),
            Divider(text=locali.get_string("MODEL_SELECTOR_SUBTEXT")),
            Input(key="custom_prompt_md", text=locali.get_string("PROMPT_INPUT_MD"), icon="filled_unknown", default=DEFAULT_PROMPT_MARKDOWN),
            Input(key="custom_prompt_plain", text=locali.get_string("PROMPT_INPUT_PLAIN"), icon="filled_unknown", default=DEFAULT_PROMPT_PLAINTEXT),
            Divider(),
            Header(text=locali.get_string("APPEARANCE_HEADER")),
            Switch(
                key="use_blockquote",
                text=locali.get_string("USE_BLOCKQUOTE_TITLE"),
                subtext=locali.get_string("USE_BLOCKQUOTE_SUBTEXT"),
                icon="msg_quote",
                default=True
            ),
            Divider(),
            Text(text=locali.get_string("USAGE_INFO_TITLE"), icon="msg_info", on_click=self._handle_show_info_alert_click)
        ]

    def _get_plugin_metadata(self, code: str) -> Tuple[str, str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º—è –∏ –≤–µ—Ä—Å–∏—é –ø–ª–∞–≥–∏–Ω–∞ –∏–∑ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é AST."""
        name = "Unknown Plugin"; version = "Unknown Version"
        try:
            tree = ast.parse(code)
            for node in ast.walk(tree):
                if isinstance(node, ast.Assign):
                    for target in node.targets:
                        if isinstance(target, ast.Name):
                            if target.id == "__name__": name = ast.literal_eval(node.value)
                            elif target.id == "__version__": version = ast.literal_eval(node.value)
        except Exception:
            pass
        return name, version

    def _wait_for_file(self, file_path: str, document: Any) -> bool:
        """–û–∂–∏–¥–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞, –∏–Ω–∏—Ü–∏–∏—Ä—É—è –µ–≥–æ, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ."""
        if os.path.exists(file_path): return True
        get_file_loader().loadFile(document, "gemini_analyzer", FileLoader.PRIORITY_HIGH, 1)
        for _ in range(30):
            if os.path.exists(file_path): return True
            time.sleep(1)
        return False

    def _process_analysis_in_background(self, peer: int, document: Any):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º –ø–æ—Ç–æ–∫–µ."""
        try:
            file_path_obj = get_file_loader().getPathToAttach(document, True)
            if not self._wait_for_file(file_path_obj.getAbsolutePath(), document):
                self._show_error_bulletin("FILE_DOWNLOAD_ERROR")
                return

            try:
                with open(file_path_obj.getAbsolutePath(), "r", encoding="utf-8", errors="ignore") as f:
                    plugin_code = f.read()
                plugin_name, plugin_version = self._get_plugin_metadata(plugin_code)
            except Exception as e:
                self._show_error_bulletin("FILE_READ_ERROR", e=str(e))
                return

            api_key = self.get_setting("gemini_api_key", "")
            model_idx = self.get_setting("model_selection", 0)
            model_name = MODEL_API_NAMES[model_idx]
            use_blockquote = self.get_setting("use_blockquote", True)
            
            if use_blockquote:
                prompt_template = self.get_setting("custom_prompt_plain", DEFAULT_PROMPT_PLAINTEXT)
            else:
                prompt_template = self.get_setting("custom_prompt_md", DEFAULT_PROMPT_MARKDOWN)

            full_prompt = prompt_template.format(plugin_code=plugin_code, plugin_name=plugin_name, plugin_version=plugin_version)
            result = self.api_handler.analyze_plugin_code(api_key, model_name, full_prompt)
            
            if result.get("success"):
                self._send_report(peer, result["text"], plugin_name, plugin_version, use_blockquote)
            else: 
                self._show_error_bulletin("API_ERROR", error=result.get("error", "Unknown"))

        except Exception as e:
            self._show_error_bulletin("UNEXPECTED_ERROR", error=str(e))
            traceback.print_exc()

    def _send_report(self, peer: int, response_text: str, plugin_name: str, plugin_version: str, use_blockquote: bool):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        header_key = "SUCCESS_HEADER_PLAIN" if use_blockquote else "SUCCESS_HEADER_MD"
        header = locali.get_string(header_key).format(plugin_name=plugin_name, plugin_version=plugin_version)
        report_text = header + response_text
        
        try:
            if use_blockquote:
                blockquote_entity = TLRPC.TL_messageEntityBlockquote()
                blockquote_entity.collapsed = True
                blockquote_entity.offset = 0
                blockquote_entity.length = len(report_text.encode('utf_16_le')) // 2
                send_message({"peer": peer, "message": report_text, "entities": [blockquote_entity]})
            else:
                parsed = parse_markdown(report_text)
                tl_entities = [entity.to_tlrpc_object() for entity in parsed.entities] if parsed.entities else None
                send_message({"peer": peer, "message": parsed.text, "entities": tl_entities})
        except Exception:
            fallback_text = report_text.replace('**', '').replace('__', '').replace('`', '')
            send_message({"peer": peer, "message": fallback_text})

        verdict_line = response_text.split('\n', 1)[0].strip()
        clean_verdict = verdict_line.replace("‚óà –í–µ—Ä–¥–∏–∫—Ç:", "").strip()
        
        def show_verdict_bulletin():
            if "‚úÖ" in verdict_line:
                BulletinHelper.show_success(clean_verdict)
            elif "‚ùå" in verdict_line or "üìõ" in verdict_line:
                BulletinHelper.show_error(clean_verdict)
            else:
                BulletinHelper.show_info(clean_verdict)
        run_on_ui_thread(show_verdict_bulletin)

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        if not hasattr(params, "message") or not isinstance(params.message, str): return HookResult()
        
        message_text = params.message.strip()
        if message_text.lower() != DEFAULT_COMMAND or not self.get_setting("enabled", True): return HookResult()
        
        api_key = self.get_setting("gemini_api_key", "")
        if not api_key:
            self._show_error_bulletin("API_KEY_MISSING")
            return HookResult(strategy=HookStrategy.CANCEL)
        
        if not params.replyToMsg:
            self._show_error_bulletin("NO_REPLY")
            return HookResult(strategy=HookStrategy.CANCEL)
            
        document = MessageObject.getDocument(params.replyToMsg.messageOwner)
        if not document or not any(str(document.file_name_fixed).endswith(ext) for ext in [".plugin", ".py"]):
            self._show_error_bulletin("NOT_A_PLUGIN")
            return HookResult(strategy=HookStrategy.CANCEL)
            
        BulletinHelper.show_info(locali.get_string("ANALYZING_MESSAGE"))
        run_on_queue(lambda: self._process_analysis_in_background(params.peer, document))
        return HookResult(strategy=HookStrategy.CANCEL)